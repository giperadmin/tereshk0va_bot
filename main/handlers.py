from aiogram import Bot, F, Router  # F - –∫–ª–∞—Å—Å —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ–∏–ª—å—Ç—Ä–æ–º
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import or_f
from main.utils.salat_generator import salat_generator
import main.utils.salat_name_generator as sng
from main.utils.work_with_json import save_as_json, read_from_json
from aiogram.filters import CommandStart, Command
import main.keyboards as kb
import time
from datetime import datetime
from main.utils.answers import responses_to_bad_reviews as rtbr
from main.utils.middleware import ThrottleMiddleware  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç —é–∑–µ—Ä–æ–≤
# from main import ThrottleMiddleware
from main import RATE_LIMIT, DB_PATH
from main.utils.bot_activity_set import bot_activity_set
from main.loader import dp
from main.utils.filters import FilterIsAdmin, FilterIsEnable
from main.utils.s3_data_sync import all_local_to_s3
from main.loader import scheduler
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.schedulers.base import STATE_PAUSED, STATE_RUNNING
from main import loader, waiting, task_data_dump_s3, task_copy_all_s3_to_cold_s3
from main.routers import last_router
from main import add_to_history as h

router = Router(name='__name__')


# router.message.middleware(ThrottleMiddleware(rate_limit=RATE_LIMIT))
# router.callback_query.middleware(ThrottleMiddleware(rate_limit=RATE_LIMIT))


@router.message(CommandStart())
@router.message((F.text.lower() == '–æ–±–Ω—É–ª–∏—Ç—å') | (F.text.lower() == '–æ–±–Ω—É–ª–∏—Å—å'))
# @router.message(or_f(CommandStart(), (F.text.in_(['–û–±–Ω—É–ª–∏—Ç—å'])))
async def intro(message: Message, state: FSMContext):
    await state.clear()
    txt = '–ü—Ä–∏–≤–µ—Ç —Å –æ—Ä–±–∏—Ç—ã! üöÄüëΩ'
    await message.answer(text=txt, reply_markup=kb.main)


@router.message(F.text.lower() == '–≤—ã–∫–ª—é—á–∏—Ç—å', FilterIsAdmin())
async def intro(message: Message, state: FSMContext):
    bot_activity_set(status=False)
    dp["bot_enabled"] = False
    dp_bot_enabled: bool = dp["bot_enabled"] # –ø—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –ø–µ—á–∞—Ç—å
    print(f"dp[\"bot_enabled\"] = {dp_bot_enabled}")
    txt = '–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω'
    await message.answer(text=txt, reply_markup=kb.main)


@router.message(F.text.lower() == '–≤–∫–ª—é—á–∏—Ç—å', FilterIsAdmin())
async def intro(message: Message, state: FSMContext):
    bot_activity_set(status=True)
    dp["bot_enabled"] = True
    dp_bot_enabled: bool = dp["bot_enabled"] # –ø—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –ø–µ—á–∞—Ç—å
    print(f"dp[\"bot_enabled\"] = {dp_bot_enabled}")
    txt = '–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω'
    await message.answer(text=txt, reply_markup=kb.main)


@router.message(F.text == '–ü—Ä–∏–¥—É–º–∞–π —Å–∞–ª–∞—Ç!',
                FilterIsEnable())  # F-—Ñ–∏–ª—å—Ç—Ä–æ–º –º–æ–∂–Ω–æ –ª–æ–≤–∏—Ç—å –≤—Å—ë, —á—Ç–æ –ø—Ä–∏—à–ª—é—Ç, —Ç–µ–∫—Å—Ç, –º–µ–¥–∏–∞...
async def test1(message: Message, bot: Bot, state: FSMContext):
    intro = '–í–æ—Ç, –∫–∞–∫–æ–π –∏–∑—É–º–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç —è –ø–æ–¥–æ–±—Ä–∞–ª–∞:\nüë©ü•ò\n'
    composition = await salat_generator(with_titles=False)
    starline = '‚ô° ‚ãÜÔΩ°Àö ‚ú©¬∞ ÔΩ°‚ãÜ‚õß‚ãÜ‚Å∫ ÔΩ°Àö‚ãÜ ‚ô°ÔΩ•Ôæü‚úß*„ÉªÔæü‚úß ‚ô°‚ãÜÔΩ°Àö‚ùÅ‚ãÜÔΩ°¬∞‚ú©'
    p = '\n'
    salat_name = await sng.salat_name_generator(composition, state)
    txt = (intro + p + salat_name.get("about") + ':' + p + p
           + composition + p + salat_name["emodzi"] + p + starline + p)
    await message.answer(text=txt, reply_markup=kb.main3)
    
    data_key = str(time.time())
    data_item = (str(message.from_user.id) +
                 '; first_name: ' + str(message.from_user.first_name) +
                 '; last_name: ' + str(message.from_user.last_name) +
                 '; username: @' + str(message.from_user.username) +
                 '; is_premium: ' + str(message.from_user.is_premium))
    data = {data_key: data_item}
    current_date = datetime.now().strftime("%Y-%m-%d")
    await save_as_json(data,
                       filename=f'users_list_{current_date}.json',
                       folderpath=DB_PATH + 'logs/',
                       overwrite=False
                       )
    txt = str(message.from_user.first_name) + ' –ø–æ–ª—É—á–∏–ª —Ä–µ—Ü–µ–ø—Ç —Å–∞–ª–∞—Ç–∞'
    h(txt)
    await bot.send_message(223852270, text=txt)


@router.message(F.text == '–ü–æ–¥–æ–±—Ä–∞—Ç—å –∑–∞–ø—Ä–∞–≤–∫—É')
async def set_settings(message: Message):
    txt = '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–∞–≤–∏—Ç—å?'
    await message.answer(text=txt, reply_markup=kb.main4)


@router.message(F.text.contains('–ó–≤–µ–∑–¥–æ–ª—ë—Ç'))
async def set_settings(message: Message):
    txt = ('–ó–≤–µ–∑–¥–æ–ª—ë—Ç üõ∏ –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–¥–∫–∏–º–∏ –∏–∑–æ—Ç–æ–ø–∞–º–∏ –≤–æ–¥–æ—Ä–æ–¥–∞ –∏ –≥–µ–ª–∏—è. '
           '–ë–ª–∏–∂–∞–π—à–∞—è –∫ –≤–∞–º –∑–∞–ø—Ä–∞–≤–∫–∞ –∑–≤–µ–∑–¥–æ–ª—ë—Ç–æ–≤ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –Ω–∞ –õ—É–Ω–µ üåî (—Å–º. –≤—ã—à–µ üî≠)).\n'
           '–î–∞—Ç—É –æ—Ç–∫—Ä—ã—Ç–∏—è —É—Ç–æ—á–Ω—è–π—Ç–µ.')
    await message.answer(text=txt, reply_markup=kb.main)


@router.message(F.text == '–°–∞–ª–∞—Çü•ó')
async def set_settings(message: Message):
    txt = ('–ù—É –Ω–µ—É–∂–µ–ª–∏ –º–Ω–µ –∑–∞ –≤–∞—Å —Ä–µ—à–∞—Ç—å, —á–µ–º –∑–∞–ø—Ä–∞–≤–∏—Ç—å —Å–∞–ª–∞—Ç?!\n'
           '–ú—É–∂—á–∏–Ω–∞–º - –Ω–µ –∂–∞–ª–µ–π—Ç–µ –º–∞–π–æ–Ω–µ–∑–∞, –¥–µ–≤–æ—á–∫–∞–º - —á—É—Ç–æ—á–∫—É –æ–ª–∏–≤–∫–æ–≤–æ–≥–æ –º–∞—Å–ª–∞ (–æ–Ω–æ, –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –¥–æ—Ä–æ–≥–æ–µ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º)')
    await message.answer(text=txt, reply_markup=kb.main2)


@router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", FilterIsAdmin())
async def set_settings(message: Message):
    txt = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
    await message.answer(text=txt, reply_markup=kb.kb_for_admin)


@router.message(F.text == "–í—ã–∫–ª—é—á–∏—Ç—å ‚≠ï", FilterIsAdmin())
async def set_settings_off(message: Message):
    txt = '–ë–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n–ù–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∞–∫—Ç–∏–≤–Ω—ã.'
    await message.answer(text=txt, reply_markup=kb.kb_for_admin)
    bot_activity_set(status=False)
    dp["bot_enabled"] = False
    dp_bot_enabled: bool = dp["bot_enabled"] # –ø—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –ø–µ—á–∞—Ç—å
    print(f"dp[\"bot_enabled\"] = {dp_bot_enabled}")


@router.message(F.text == '–í–∫–ª—é—á–∏—Ç—å üü¢', FilterIsAdmin())
async def set_settings_on(message: Message):
    txt = '–ë–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –±—É–¥–µ—Ç'
    bot_activity_set(status=True)
    await message.answer(text=txt, reply_markup=kb.main)
    if scheduler.running and scheduler.state == STATE_PAUSED:
        scheduler.resume()
    dp["bot_enabled"] = True
    dp_bot_enabled: bool = dp["bot_enabled"] # –ø—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –ø–µ—á–∞—Ç—å
    print(f"dp[\"bot_enabled\"] = {dp_bot_enabled}")


@router.message(F.text == "–í—ã–∫–ª—é—á–∏—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–º–ø üî¥üíæ", FilterIsAdmin())
async def set_settings_off_and_dump(message: Message):
    txt = '–ë–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±—É–¥–µ—Ç. –î–∞–º–ø –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–∞–Ω –±—É–¥–µ—Ç.'
    await message.answer(text=txt, reply_markup=kb.kb_for_admin)
    bot_activity_set(status=False)
    dp["bot_enabled"] = False
    dp_bot_enabled: bool = dp["bot_enabled"] # –ø—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –ø–µ—á–∞—Ç—å
    print(f"dp[\"bot_enabled\"] = {dp_bot_enabled}")
    print(f'scheduler_task_running –≤ —Ö—ç–Ω–¥–ª–µ—Ä–∞—Ö: {loader.scheduler_task_running}')
    
    # –ï—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∞ —Ñ–ª–∞–≥ - –∂–¥—ë–º:
    waiting()
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:
    scheduler.pause()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∞–º–ø –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ S3:
    task_data_dump_s3()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∞–º–ø –∏–∑ S3 –≤ S3 cold:
    task_copy_all_s3_to_cold_s3()
    
    txt = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ.\n‚ö†Ô∏è–í–ù–ò–ú–ê–ù–ò–ï! –ë–æ—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã–º.'
    await message.answer(text=txt, reply_markup=kb.kb_for_admin)
    print(f'scheduler_task_running –≤ —Ö—ç–Ω–¥–ª–µ—Ä–∞—Ö –≤ –∫–æ–Ω—Ü–µ: {loader.scheduler_task_running}')


@router.message(F.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def set_settings(message: Message):
    txt = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ üòÅ –®—É—á—É))) –ü—Ä–æ—Å—Ç–æ –ø–æ–ª–æ–∂–∏—Ç–µ—Å—å –Ω–∞ —É–¥–∞—á—É)'
    await message.answer(text=txt, reply_markup=kb.main)


@router.message(F.text.contains("üî•") | F.text.contains("üöÄ"))
async def set_settings(message: Message):
    txt = '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤ üíã'
    await message.answer(text=txt, reply_markup=kb.main)


@router.message(F.text.contains("ü§¢"))
async def set_settings(message: Message, state: FSMContext):
    txt = await rtbr(state)
    await message.answer(text=txt, reply_markup=kb.main)

# @router.message()
# async def last_handler(message: Message):
#     txt = '‚ö†Ô∏è–û–π, —á–æ—Ç —Å–ª–æ–º–∞–ª–æ—Å—è... –ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞!'
#     await message.answer(text=txt, reply_markup=kb.main)
